{"pageProps":{"title":"Building Web Components using Svelte","date":"April 13, 2021","excerpt":"This post is about how I build a Web Component to show my 3D Printer stats in my Home Automation dashboard.","tags":["Svelte","Home Assistant","Web Components","3D Printing","Home Automation"],"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"So... I own a few 3D Printers, one of which is hooked up to a Raspberry PI Zero running \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/OctoPrint/OctoPrint\"\n  }, \"Octoprint\"), \".\"), mdx(\"p\", null, \"I also run the open-source home automation platform \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.home-assistant.io/\"\n  }, \"Home Assistant\"), \" on a Raspberry PI 4 to control and automate all the smart sensors and lighting etc. in my house.\"), mdx(\"p\", null, \"In this post, I will go through how I created a custom UI element for Home Assistant that transform my 3D Printer dashboard as shown below!\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Before\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"After\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"img\", {\n    parentName: \"td\",\n    \"src\": \"https://user-images.githubusercontent.com/8472619/114595424-aad05080-9c8e-11eb-9f25-455ed8be0def.png\",\n    \"alt\": \"Old Dashboard\"\n  })), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"img\", {\n    parentName: \"td\",\n    \"src\": \"https://user-images.githubusercontent.com/8472619/114276747-50ce5180-9a28-11eb-99d5-2f921a8aba67.png\",\n    \"alt\": \"Octoprint card\"\n  }))))), mdx(\"p\", null, \"The code for my Home Assistant component is available on GitHub: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/kasperlaursen/octoprint-card\"\n  }, \"https://github.com/kasperlaursen/octoprint-card\")), mdx(\"p\", null, \"And the code for this tutorial can also be found on GitHub: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/kasperlaursen/Building-Web-Components-using-Svelte\"\n  }, \"https://github.com/kasperlaursen/Building-Web-Components-using-Svelte\")), mdx(\"p\", null, \"If you're using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://code.visualstudio.com/\"\n  }, \"Visual Studio Code\"), \" it's recommend installing the official extension \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode\"\n  }, \"Svelte for VS Code\"), \".\"), mdx(\"p\", null, \"Let's just get into it, no one wants to read a multi-page introduction \\uD83D\\uDE00\"), mdx(\"h3\", null, \"Project Setup\"), mdx(\"p\", null, \"To get started we need to generate a new Svelte project:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npx degit sveltejs/template my-svelte-project\\n\")), mdx(\"p\", null, \"Go to the folder this creates:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"cd my-svelte-project\\n\")), mdx(\"p\", null, \"Let's enable Typescript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"node scripts/setupTypeScript.js\\n\")), mdx(\"p\", null, \"Install dependencies and run the local dev server:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npm install\\nnpm run dev\\n\")), mdx(\"h3\", null, \"Compiling to a Web Component\"), mdx(\"p\", null, \"Now let's compile the code to a Web Component rather than a full website!\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"First, off we need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"svelte:options\"), \" tag to the top of our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.svelte\"), \" component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"<svelte:options tag=\\\"my-web-component\\\" />\\n\")), mdx(\"p\", null, \"Then we need to let the svelte compiler know that we want to create web components.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Go to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rollup.config.js\"), \" and add the line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"customElement: true,\"), \" as shown below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diffs\"\n  }, \"svelte({\\n preprocess: sveltePreprocess({ sourceMap: !production }),\\n compilerOptions: {\\n // enable run-time checks when not in production\\n dev: !production,\\n customElement: true,\\n },\\n}),\\n\\n\")), mdx(\"p\", null, \"While we are in the rollup file, let's have svelte compile the CSS to the main bundle.js instead of a separate CSS file.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"This is done by removing the following code from the rollup file;\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import css from \\\"rollup-plugin-css-only\\\";\\n\\n....\\n\\n// we'll extract any component CSS out into\\n// a separate file - better for performance\\ncss({ output: \\\"bundle.css\\\" }),\\n\\n\")), mdx(\"p\", null, \"At this point, Svelte is already creating a Web Component/Custom Element for us, but we are still rendering the component to the body element using svelte.\"), mdx(\"p\", null, \"Go to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.ts\"), \" file and let's stop svelte from rendering the component, by removing the following code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const app = new App({\\n target: document.body,\\n props: {\\n name: 'world'\\n }\\n});\\n\\nexport default app;\\n\")), mdx(\"p\", null, \"If you do \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" plan to integrate your web component with Home Assistant, you can simply delete \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.ts\"), \" and make the following change in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rollup.config.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"export default {\\n // input: \\\"src/main.ts\\\",\\n input: \\\"src/App.svelte\\\",\\n output: {\\n\")), mdx(\"p\", null, \"Now your local dev server should show a blank page.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"So let's add the Web Component to the page.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Go to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public/index.html\"), \" and update the file to look like below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n <head>\\n <meta charset=\\\"utf-8\\\" />\\n <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\" />\\n\\n <title>Svelte app</title>\\n\\n <link rel=\\\"icon\\\" type=\\\"image/png\\\" href=\\\"/favicon.png\\\" />\\n <link rel=\\\"stylesheet\\\" href=\\\"/global.css\\\" />\\n\\n <script defer src=\\\"/build/bundle.js\\\"></script>\\n </head>\\n\\n <body>\\n <my-web-component />\\n </body>\\n</html>\\n\\n\")), mdx(\"p\", null, \"After Reloading your page you should now see \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HELLO UNDEFINED!\"), \" on your page.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"To pass the name prop to your component simply add the property to the custom element in your index.html file as below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"<my-web-component name=\\\"world\\\" />\\n\")), mdx(\"p\", null, \"So... This was the basics of generating a Web Component/Custom Element with Svelte. You can now add your bundle.js to any HTML page and the component will be available as an HTML custom element.\"), mdx(\"p\", null, \"The next post will focus on integration with Home Assistant, and when available the link will be found {{Here}}!\"), mdx(\"p\", null, \"The code for this project is available on GitHub: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/kasperlaursen/Building-Web-Components-using-Svelte\"\n  }, \"https://github.com/kasperlaursen/Building-Web-Components-using-Svelte\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Where there can be a commit for each section (header) on these posts!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>So... I own a few 3D Printers, one of which is hooked up to a Raspberry PI Zero running <a href=\"https://github.com/OctoPrint/OctoPrint\">Octoprint</a>.</p><p>I also run the open-source home automation platform <a href=\"https://www.home-assistant.io/\">Home Assistant</a> on a Raspberry PI 4 to control and automate all the smart sensors and lighting etc. in my house.</p><p>In this post, I will go through how I created a custom UI element for Home Assistant that transform my 3D Printer dashboard as shown below!</p><table><thead><tr><th>Before</th><th>After</th></tr></thead><tbody><tr><td><img src=\"https://user-images.githubusercontent.com/8472619/114595424-aad05080-9c8e-11eb-9f25-455ed8be0def.png\" alt=\"Old Dashboard\"/></td><td><img src=\"https://user-images.githubusercontent.com/8472619/114276747-50ce5180-9a28-11eb-99d5-2f921a8aba67.png\" alt=\"Octoprint card\"/></td></tr></tbody></table><p>The code for my Home Assistant component is available on GitHub: <a href=\"https://github.com/kasperlaursen/octoprint-card\">https://github.com/kasperlaursen/octoprint-card</a></p><p>And the code for this tutorial can also be found on GitHub: <a href=\"https://github.com/kasperlaursen/Building-Web-Components-using-Svelte\">https://github.com/kasperlaursen/Building-Web-Components-using-Svelte</a></p><p>If you&#x27;re using <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> it&#x27;s recommend installing the official extension <a href=\"https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode\">Svelte for VS Code</a>.</p><p>Let&#x27;s just get into it, no one wants to read a multi-page introduction 😀</p><h3>Project Setup</h3><p>To get started we need to generate a new Svelte project:</p><pre><code>npx degit sveltejs/template my-svelte-project\n</code></pre><p>Go to the folder this creates:</p><pre><code>cd my-svelte-project\n</code></pre><p>Let&#x27;s enable Typescript:</p><pre><code>node scripts/setupTypeScript.js\n</code></pre><p>Install dependencies and run the local dev server:</p><pre><code>npm install\nnpm run dev\n</code></pre><h3>Compiling to a Web Component</h3><p>Now let&#x27;s compile the code to a Web Component rather than a full website!<br/>\n<!-- -->First, off we need to add the <code>svelte:options</code> tag to the top of our <code>App.svelte</code> component:</p><pre><code>&lt;svelte:options tag=&quot;my-web-component&quot; /&gt;\n</code></pre><p>Then we need to let the svelte compiler know that we want to create web components.<br/>\n<!-- -->Go to <code>rollup.config.js</code> and add the line <code>customElement: true,</code> as shown below:</p><pre><code class=\"language-diffs\">svelte({\n preprocess: sveltePreprocess({ sourceMap: !production }),\n compilerOptions: {\n // enable run-time checks when not in production\n dev: !production,\n customElement: true,\n },\n}),\n\n</code></pre><p>While we are in the rollup file, let&#x27;s have svelte compile the CSS to the main bundle.js instead of a separate CSS file.<br/>\n<!-- -->This is done by removing the following code from the rollup file;</p><pre><code>import css from &quot;rollup-plugin-css-only&quot;;\n\n....\n\n// we&#x27;ll extract any component CSS out into\n// a separate file - better for performance\ncss({ output: &quot;bundle.css&quot; }),\n\n</code></pre><p>At this point, Svelte is already creating a Web Component/Custom Element for us, but we are still rendering the component to the body element using svelte.</p><p>Go to the <code>main.ts</code> file and let&#x27;s stop svelte from rendering the component, by removing the following code:</p><pre><code>const app = new App({\n target: document.body,\n props: {\n name: &#x27;world&#x27;\n }\n});\n\nexport default app;\n</code></pre><p>If you do <strong>not</strong> plan to integrate your web component with Home Assistant, you can simply delete <code>main.ts</code> and make the following change in <code>rollup.config.js</code>:</p><pre><code>export default {\n // input: &quot;src/main.ts&quot;,\n input: &quot;src/App.svelte&quot;,\n output: {\n</code></pre><p>Now your local dev server should show a blank page.<br/>\n<!-- -->So let&#x27;s add the Web Component to the page.<br/>\n<!-- -->Go to <code>public/index.html</code> and update the file to look like below:</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n &lt;head&gt;\n &lt;meta charset=&quot;utf-8&quot; /&gt;\n &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot; /&gt;\n\n &lt;title&gt;Svelte app&lt;/title&gt;\n\n &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;/favicon.png&quot; /&gt;\n &lt;link rel=&quot;stylesheet&quot; href=&quot;/global.css&quot; /&gt;\n\n &lt;script defer src=&quot;/build/bundle.js&quot;&gt;&lt;/script&gt;\n &lt;/head&gt;\n\n &lt;body&gt;\n &lt;my-web-component /&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre><p>After Reloading your page you should now see <code>HELLO UNDEFINED!</code> on your page.<br/>\n<!-- -->To pass the name prop to your component simply add the property to the custom element in your index.html file as below:</p><pre><code>&lt;my-web-component name=&quot;world&quot; /&gt;\n</code></pre><p>So... This was the basics of generating a Web Component/Custom Element with Svelte. You can now add your bundle.js to any HTML page and the component will be available as an HTML custom element.</p><p>The next post will focus on integration with Home Assistant, and when available the link will be found {{Here}}!</p><p>The code for this project is available on GitHub: <a href=\"https://github.com/kasperlaursen/Building-Web-Components-using-Svelte\">https://github.com/kasperlaursen/Building-Web-Components-using-Svelte</a><br/>\n<!-- -->Where there can be a commit for each section (header) on these posts!</p>","scope":{}}},"__N_SSG":true}